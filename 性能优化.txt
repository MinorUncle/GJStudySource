inline
	.c等实现文件中定义的inline只能在本文件中有效
	如果要.h中声明inline函数，则定义也需要再.h文件中。如果不是类成员函数，还要添加static.
	 
c++4种类型转换
1.static_cast

最常用的类型转换符，在正常状况下的类型转换，如把int转换为float，如：int i；float f； f=（float）i；或者f=static_cast<float>(i);

2.const_cast

用于取出const属性，把const类型的指针变为非const类型的指针，如：const int *fun(int x,int y){}　　int *ptr=const_cast<int *>(fun(2.3))


3.dynamic_cast

该操作符用于运行时检查该转换是否类型安全，但只在多态类型时合法，即该类至少具有一个虚拟方法。dynamic_cast与static_cast具有相同的基本语法，dynamic_cast主要用于类层次间的上行转换和下行转换，还可以用于类之间的交叉转换。在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的；在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全。

4.reinterpret_cast

interpret是解释的意思，reinterpret即为重新解释，此标识符的意思即为数据的二进制形式重新解释，但是不改变其值。如：int i; char *ptr="hello freind!"; i=reinterpret_cast<int>(ptr);这个转换方式很少使用。



c++ 11
理解lvalue和rvalue 
lvalue表示能取地址的值，有名字的，等号左边的。
rvalue表示不能取地址的，没有名字的，例如：常数、等号右边的



在参数类型推导上，c++11 加入了如下两个原则：
原则 (1):

引用折叠原则 (reference collapsing rule)，注意，以下条目中的 T 为具体类型，不是推导类型。

1)  T& & (引用的引用) 被转化成 T&.

2）T&& & (rvalue的引用）被传化成 T&.

3)  T& && (引用作rvalue) 被转化成 T&.

4)  T&& && 被转化成 T&&.

原则 (2)：

对于以 rvalue reference 作为参数的模板函数，它的参数推导也有一个特殊的原则，假设函数原型为：

template<class TYPE, class ARG>
TYPE* acquire_obj(ARG&& arg);

1) 如果我们传递 lvalue 给 acquire_obj()，则 ARG 就会被推导为 ARG&，因此如下代码的第二行，acquire_obj 被推导为: TYPE* acquire_obj(ARG& &&)。

1 ARG arg;
2 acquire_obj(arg);

然后根据前面说的折叠原则，我们得到原型如下的函数： TYPE* acquire_obj(ARG&);

2) 如果我们如下这样传递 rvalue 给 acquire_obj()，则 ARG 就会被推导为 ARG。

acquire_obj(get_arg()); 

